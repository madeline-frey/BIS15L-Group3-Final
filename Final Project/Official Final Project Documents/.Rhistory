session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
green_turtles <- turtles3 %>%
filter(species == "Green")
loggerhead_turtles <- turtles3 %>%
filter(species == "Loggerhead")
kemps_ridley_turtles<- turtles3 %>%
filter(species == "Kemps_Ridley")
unknown_turtles<- turtles3 %>%
filter(species == "UN")
hawksbill_turtles <- turtles3 %>%
filter(species == "Hawksbill")
leatherback_turtles<- turtles3 %>%
filter(species == "Leatherback")
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap")
absolutePanel(top = 60, left = 20,
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
a
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap")
a
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
a
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap")
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap")
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap")
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE) %>%
checkboxInput("leatherback_point", "Leatherback", FALSE) %>%
checkboxInput("loggerhead_point", "Loggerhead", FALSE) %>%
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE) %>%
checkboxInput("unknown_point", "Unknown", FALSE) %>%
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
})
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles()
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
