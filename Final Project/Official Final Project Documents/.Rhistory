dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
turtles<-read.csv(here("Final Project","Official Final Project Documents/Turtle_data.csv"))
turtles_tidy<-turtles%>%
na_if("")%>%
na_if("0")%>%
na_if("0.0")%>%
mutate(dead_alive_new=if_else(Dead_Alive=="alive","Alive",Dead_Alive))
turtles3<-turtles_tidy%>%
mutate(DateCapture_new=dmy(DateCapture))%>%
filter(!is.na(DateCapture_new))%>%
mutate(Capture_month=month(DateCapture_new))%>%
mutate(Capture_day=day(DateCapture_new))%>%
mutate(capture_week_day=wday(DateCapture_new))
turtles3<-clean_names(turtles3)
turtles3%>%
select(cap_latitude,cap_longitude)%>%
summary()
cap_lat <- c(33.49, 38.41)
cap_long <- c(-79.08, -75.47)
bbox <- make_bbox(cap_long, cap_lat, f = 0.1)
cap_map_base <- get_map(bbox, maptype = "toner-lite", source = "stamen")
ggmap(cap_map_base)
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations")
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations", color= "Species", shape= "Status")
turtles3%>%
select(rel_latitude,rel_longitude)%>%
summary()
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -36.03)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "toner-lite", source = "stamen")
ggmap(rel_map_base)
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
xlim(-82,-71)+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations Without Outlier")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations", color= "Species", shape= "Status")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
xlim(-82,-71)+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations Without Outlier", color= "Species", shape= "Status")
library(shinydashboard)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Captures"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Catch Details", choices = c("research_type","dead_alive_new", "body_area_pit","body_area","record_type","cap_region","rel_region"),
selected = "record_type"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Turtle Information", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Catch Characterisitics",x=NULL,y="Number of Turtles")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
turtles<-read.csv(here("Final Project","Official Final Project Documents/Turtle_data.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(leaflet.minicharts)
turtles<-read.csv(here("Final Project","Official Final Project Documents/Turtle_data.csv"))
turtles_tidy<-turtles%>%
na_if("")%>%
na_if("0")%>%
na_if("0.0")%>%
mutate(dead_alive_new=if_else(Dead_Alive=="alive","Alive",Dead_Alive))
turtles3<-turtles_tidy%>%
mutate(DateCapture_new=dmy(DateCapture))%>%
filter(!is.na(DateCapture_new))%>%
mutate(Capture_month=month(DateCapture_new))%>%
mutate(Capture_day=day(DateCapture_new))%>%
mutate(capture_week_day=wday(DateCapture_new))
turtles3<-clean_names(turtles3)
turtles3%>%
select(cap_latitude,cap_longitude)%>%
summary()
cap_lat <- c(33.49, 38.41)
cap_long <- c(-79.08, -75.47)
bbox <- make_bbox(cap_long, cap_lat, f = 0.1)
cap_map_base <- get_map(bbox, maptype = "toner-lite", source = "stamen")
ggmap(cap_map_base)
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations")
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations",color= "Species", shape= "Status")
turtles3%>%
select(rel_latitude,rel_longitude)%>%
summary()
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -36.03)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "toner-lite", source = "stamen")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations",color= "Species", shape= "Status")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
xlim(-82,-71)+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations Without Outlier",color= "Species", shape= "Status")
options(knitr.duplicate.label = "allow")
knitr::opts_chunk$set(echo = TRUE)
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations",color= "Species", shape= "Status")
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(cap_longitude,cap_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations",color= "Species", shape= "Status")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations",color= "Species", shape= "Status")
knitr::opts_chunk$set(echo = TRUE)
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -36.03)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "toner-lite", source = "stamen")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations",color= "Species", shape= "Status")
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(rel_longitude,rel_latitude,color=species,shape=dead_alive_new), size = 1.5) +
xlim(-82,-71)+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Longitude", y = "Latitude", title = "Release Locations Without Outlier",color= "Species", shape= "Status")
library(shinydashboard)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Captures"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Catch Details", choices = c("research_type","dead_alive_new", "body_area_pit","body_area","record_type","cap_region","rel_region"),
selected = "record_type"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Turtle Information", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Catch Characteristics",x=NULL,y="Number of Turtles")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Captures"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Catch Details", choices = c("research_type","dead_alive_new", "body_area_pit","body_area","record_type","cap_region","rel_region"),
selected = "record_type"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Turtle Information", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Catch Characteristics",x=NULL,y="Number of Turtles")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shinydashboard)
green_turtles <- turtles3 %>%
filter(species == "Green")
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#create the map
output$mymap <- renderLeaflet({
addTiles() %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 3)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
turtles3%>%
ggplot(aes(x=year,fill=year))+
geom_bar(position = "dodge")+
labs(title="Total Turtle Captures Across the Years",x="Year",y="Turtle Captures")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(x=year,fill=year))+
geom_bar(position = "dodge")+
labs(title="Total Turtle Captures Across the Years",x="Year",y="Turtle Captures")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(month(x=date_capture_new,label=TRUE),fill=month(x=date_capture_new,label=TRUE)))+
geom_bar()+
labs(title="Turtle Captures by Month",x = NULL,
y = "Number of Captures",fill="Month")+
scale_fill_brewer(palette="Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=6))+
facet_wrap(~year)
turtles3$year<-as.factor(turtles3$year)
turtles3%>%
group_by(species,year)%>%
summarise(Total=n())%>%
ggplot(aes(x=year,y=Total,group=species,color=species))+
geom_line()+
geom_point(shape=2)+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Captures By Species Across the Years",x="Year",y="Turtle Captures")
turtles3%>%
ggplot(aes(x=day(date_capture_new)))+
geom_density(color="black",fill="green",alpha=.5)+
labs(title="Turtle Captures Within a Given Month",x = "Day of the Month",
y = "Number of Captures")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3%>%
ggplot(aes(wday(x=date_capture_new,label=TRUE),fill=wday(x=date_capture_new,label=TRUE)))+
geom_bar()+
labs(title="Turtle Captures Across the Week Days",x = NULL,
y = "Number of Captures",fill="Week Day")+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
turtles3$year<-as.factor(turtles3$year)
turtles3%>%
group_by(species,year)%>%
summarise(Total=n())%>%
ggplot(aes(x=year,y=Total,group=species,color=species))+
geom_line()+
geom_point(shape=2)+
scale_fill_brewer(palette = "Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Turtle Captures By Species Across Years",x="Year",y="Turtle Captures")
turtles3%>%
ggplot(aes(month(x=date_capture_new,label=TRUE),fill=month(x=date_capture_new,label=TRUE)))+
geom_bar()+
labs(title="Turtle Captures by Month",x = NULL,
y = "Number of Captures",fill="Month")+
scale_fill_brewer(palette="Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1,size=6))+
facet_wrap(~year)
turtles3%>%
ggplot(aes(month(x=date_capture_new,label=TRUE), fill=month(x=date_capture_new,label=TRUE)))+
geom_bar(position = "dodge")+
labs(title="Turtle Captures by Month",x = NULL,
y = "Number of Captures",fill="Month")+
scale_fill_brewer(palette="Set3")+
theme_light(base_size = 12)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
