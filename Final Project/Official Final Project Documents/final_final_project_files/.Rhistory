)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = turtles3, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5)
})
}
#next we use the observe function to make the checkboxes dynamic. If you leave this part
shinyApp(ui, server)
naniar::miss_var_summary(turtles3)
turtles3$year<-as.character(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Tests"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("species", "Select Species:",
choices=unique(turtles3$species)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Type of Test", choices = c("oxtetracyclene","health_blood","satellite_tag","holding_facility","sex_laparoscopy",     "sex_necropsy","sex_testosterone_level_1","sex_testosterone_level_2","hematology","oc_ob","fh","metals","sia_skin","sia_bone",     "sia_blood","sia_barnacles","sia_scutes","sia_analyzed","photos","scute","cloacal","lesion","fat","fecal","pathogens",     "entangled","imaging","organ_biopsy"),
selected = "entangled"),
hr(),
helpText("Source: (https://www.fisheries.noaa.gov/inport/item/35875). Capture efforts were conducted to evaluate the growth rates, sex ratios, size distribution, species composition, genetic composition, relative survival rates and foraging ecology of sea turtle populations in NC.")
),
box(title = "Test Performed T/F", width = 8,
plotOutput("plot", width = "800px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
turtles3 %>%
filter(species == input$species) %>%
ggplot(aes_string(x ="year",fill = input$x)) +
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "Tests Performed On Turtles",x=NULL,y="Number of Turtles Tested for Selected Test")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
turtle_lat <- turtles3 %>%
select(species, cap_latitude, cap_longitude) %>%
pivot_wider(names_from = "species",
values_from = "cap_latitude")
turtle_lat <- turtles3 %>%
select(species, cap_latitude, cap_longitude) %>%
pivot_wider(names_from = "species",
values_from = "cap_latitude")
turtle_lat
turtle_lat <- turtles3 %>%
select(species, cap_latitude) %>%
pivot_wider(names_from = "species",
values_from = "cap_latitude")
turtle_lat
turtle_lat
summary(turtles3$species)
n_unique(turtles3$species)
levels(turtles3$species)
(turtles3$species)
choices=unique(turtles3$species)
unique(turtles3$species)
greed_turtles <- turtles3 %>%
filter(species == "Green")
green_turtles <- turtles3 %>%
filter(species == "Green")
green_turtles
green_turtles <- turtles3 %>%
filter(species == "Green")
loggerhead_turtles <- turtles3 %>%
filter(species == "Loggerhead")
loggerhead_turtles <- turtles3 %>%
filter(species == "Loggerhead")
kemps_ridley_turtles<- turtles3 %>%
filter(species == "Kemps_Ridley")
unknown_turtles<- turtles3 %>%
filter(species == "UN")
unknown_turtles<- turtles3 %>%
filter(species == "UN")
hawksbill_turtlesturtles3 %>%
filter(species == "Hawksbill")
hawksbill_turtles <- turtles3 %>%
filter(species == "Hawksbill")
leatherback_turtles<- turtles3 %>%
filter(species == "Leatherback")
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
fluidPage(
#Assign Dasbhoard title
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
server <- function(input, output, session) {
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE)
})
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE)
})
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
outline <- quakes[chull(quakes$long, quakes$lat),]
map <- leaflet(turtles3) %>%
# Base groups
addTiles(group = "Turtle Capture Locations") %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
addTiles() %>%
output$mymap <- renderLeaflet({
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
addTiles() %>%
output$mymap <- renderLeaflet({
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap", width = "700px",
height = "500px"),
#End:  the First Block
)
)
)
server <- function(input, output, session) {
#Assign output$mymap with renderLeaflet object
output$mymap <- renderLeaflet({
addTiles() %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, group = "Hawksbill") %>%
addLayersControl(
overlayGroups = c("Green", "Leatherback", "Loggerhead", "Kemps Ridley", "Unknown", "Hawksbill"),
options = layersControlOptions(collapsed = FALSE))
})
}
shinyApp(ui, server)
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
# plot leaflet object (map)
leafletOutput(outputId = "mymap")
#End:  the First Block
#this allows me to put the checkmarks ontop of the map to allow people to view earthquake depth or overlay a heatmap
absolutePanel(top = 60, left = 20,
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap")
absolutePanel(top = 60, left = 20,
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap")
absolutePanel(top = 60, left = 20,
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#Assign output$mymap with renderLeaflet object
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
turtles3$year<-as.numeric(turtles3$year)
ui <- dashboardPage(skin="green",
dashboardHeader(title = "Turtle Capture Locations"),
dashboardSidebar(disable = T),
dashboardBody(
fluidPage(
titlePanel("Turtle Capture Locations"),
leafletOutput(outputId = "mymap"),
absolutePanel(top = 60, left = 20,
checkboxInput("green_point", "Green", FALSE),
checkboxInput("leatherback_point", "Leatherback", FALSE),
checkboxInput("loggerhead_point", "Loggerhead", FALSE),
checkboxInput("kemps_ridley_point", "Kemps Ridley", FALSE),
checkboxInput("unknown_point", "Unknown", FALSE),
checkboxInput("hawksbillk_point", "Hawksbill", FALSE)
)
)
)
)
server <- function(input, output, session) {
pal1 <- colorFactor(topo.colors(7), turtles3$species)
#Assign output$mymap with renderLeaflet object
#create the map
output$mymap <- renderLeaflet({
leaflet(turtles3) %>%
setView(lng = -99, lat = 45, zoom = 2)  %>% #setting the view over ~ center of North America
addTiles() %>%
addCircles(data = green_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Green") %>%
addCircles(data = leatherback_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Leatherback") %>%
addCircles(data = loggerhead_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Loggerhead") %>%
addCircles(data = kemps_ridley_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Kemps Ridley") %>%
addCircles(data = unknown_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Unknown")
addCircles(data = hawksbill_turtles, lat = ~ cap_latitude, lng = ~ cap_longitude, weight = 1, radius = 2, fillOpacity = 0.5, color = ~pal(turtles3$species), group = "Hawksbill")
})
#next we use the observe function to make the checkboxes dynamic. If you leave this part out you will see that the checkboxes, when clicked on the first time, display our filters...But if you then uncheck them they stay on. So we need to tell the server to update the map when the checkboxes are unchecked.
observe({
proxy <- leafletProxy("mymap", data = turtles3)
proxy %>% clearMarkers()
if (input$markers) {
proxy %>% addCircleMarkers(stroke = FALSE, color = ~pal1(turtles3$species), fillOpacity = 0.2,
opacity = 1)}
else {
proxy %>% clearMarkers() %>% clearControls()
}
})
}
setwd("~/Desktop/BIS15L-Group3-Final/BIS15L-Group3-Final")
setwd("~/Desktop/BIS15L-Group3-Final/BIS15L-Group3-Final/Final Project/Official Final Project Documents/final_final_project_files")
